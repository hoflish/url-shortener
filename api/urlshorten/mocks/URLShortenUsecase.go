// Code generated by mockery v1.0.0. DO NOT EDIT.
package mocks

import context "context"
import mock "github.com/stretchr/testify/mock"
import models "github.com/hoflish/url-shortener/api/models"

// URLShortenUsecase is an autogenerated mock type for the URLShortenUsecase type
type URLShortenUsecase struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *URLShortenUsecase) Close() {
	_m.Called()
}

// Fetch provides a mock function with given fields: ctx, shortURL
func (_m *URLShortenUsecase) Fetch(ctx context.Context, shortURL string) (*models.URLShorten, error) {
	ret := _m.Called(ctx, shortURL)

	var r0 *models.URLShorten
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.URLShorten); ok {
		r0 = rf(ctx, shortURL)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.URLShorten)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, shortURL)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store provides a mock function with given fields: ctx, us
func (_m *URLShortenUsecase) Store(ctx context.Context, us *models.URLShorten) (*models.URLShorten, error) {
	ret := _m.Called(ctx, us)

	var r0 *models.URLShorten
	if rf, ok := ret.Get(0).(func(context.Context, *models.URLShorten) *models.URLShorten); ok {
		r0 = rf(ctx, us)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.URLShorten)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *models.URLShorten) error); ok {
		r1 = rf(ctx, us)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
